const { default: makeWASocket, useMultiFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');
const express = require('express');
const mysql = require('mysql2/promise');
const qrcode = require('qrcode');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

const app = express();
app.use(express.json());
const port = 8012;

const sessions = {};

const dbConfig = {
  host: '127.0.0.1',
  user: 'root',
  password: '@Intercheck!#jksddfofsmd√ßls$',
  database: 'app_sistnortecheck',
  waitForConnections: true,
  connectionLimit: 100,
  queueLimit: 0,
};

let sessionIndex = 0
const holidays = [
  '2024-01-01', // Ano Novo
  '2024-02-12', // Carnaval
  '2024-02-13', // Quarta-feira de Cinzas (ponto facultativo at√© as 14h)
  '2024-03-29', // Sexta-feira Santa
  '2024-04-21', // Tiradentes
  '2024-05-01', // Dia do Trabalho
  '2024-05-30', // Corpus Christi
  '2024-09-07', // Independ√™ncia do Brasil
  '2024-10-12', // Nossa Senhora Aparecida
  '2024-11-02', // Finados
  '2024-11-15', // Proclama√ß√£o da Rep√∫blica
  '2024-12-25'  // Natal
];

function isHoliday(date) {
  const formattedDate = date.toISOString().split('T')[0];
  return holidays.includes(formattedDate);
}

function isWorkingHours() {
  const now = new Date();
  const dayOfWeek = now.getDay(); // 0 = domingo, 6 = s√°bado
  const hour = now.getHours();
  const minute = now.getMinutes();

  if (dayOfWeek === 0 || dayOfWeek === 6 || isHoliday(now)) {
    return false; // Feriado ou fim de semana
  }

  const currentTimeInMinutes = hour * 60 + minute;
  const startTimeInMinutes = 9 * 60; // 14:00
  const endTimeInMinutes = 17 * 60 + 59; // 17:59

  return currentTimeInMinutes >= startTimeInMinutes && currentTimeInMinutes <= endTimeInMinutes;
}


function getActiveSessions() {
  return Object.keys(sessions).filter(sessionId => sessions[sessionId].isConnected);
}


const pool = mysql.createPool(dbConfig);

app.use(express.static(path.join(__dirname, 'public')));

async function fetchContactsToSend() {
  const connection = await pool.getConnection();
  try {
    const [contacts] = await connection.execute(`
      SELECT DISTINCT
        devedores.id,
        titulo.data_envio_whatsapp,
        titulo.dataVencimento,
        t.telefone,
        devedores.nome,
        titulo.statusBaixa,
        titulo.data_baixa,
        core_empresa.nome_fantasia,
        devedores.nome as DevedorNome,
        core_empresa.nome_fantasia AS EmpresaNomeFantasia,
        titulo.valor AS ParcelaValor,
        titulo.dataVencimento AS VencimentoParcela,
        core_empresa.banco AS ChavePix
      FROM (
        SELECT id, telefone FROM devedores UNION ALL
        SELECT id, telefone1 FROM devedores UNION ALL
        SELECT id, telefone2 FROM devedores UNION ALL
        SELECT id, telefone3 FROM devedores UNION ALL
        SELECT id, telefone4 FROM devedores UNION ALL
        SELECT id, telefone5 FROM devedores UNION ALL
        SELECT id, telefone6 FROM devedores UNION ALL
        SELECT id, telefone7 FROM devedores UNION ALL
        SELECT id, telefone8 FROM devedores UNION ALL
        SELECT id, telefone9 FROM devedores UNION ALL
        SELECT id, telefone10 FROM devedores
      ) t
      JOIN devedores ON t.id = devedores.id
      JOIN core_empresa ON devedores.empresa_id = core_empresa.id
      JOIN titulo ON titulo.devedor_id = devedores.id
      WHERE
        titulo.statusBaixa = 3
        AND titulo.dataVencimento < CURDATE()
        AND (titulo.data_envio_whatsapp < CURDATE() OR titulo.data_envio_whatsapp IS NULL)
        AND t.telefone IS NOT NULL
        AND t.telefone <> ''     
        AND titulo.data_baixa IS NULL
        AND titulo.dataVencimento < CURDATE() 
        ORDER BY titulo.data_envio_whatsapp ASC
    `);

    const contactMap = contacts.reduce((acc, contact) => {
      const formattedPhone = contact.telefone.replace(/\D/g, ''); // Remove caracteres n√£o num√©ricos

      if (formattedPhone.length > 0) {
        if (!acc[contact.id]) {
          acc[contact.id] = {
            ...contact,
            telefones: [],
          };
        }

        // Adiciona "55" se n√£o estiver presente e verifica se h√° 13 d√≠gitos
        let phone = formattedPhone.startsWith('55') ? formattedPhone : `55${formattedPhone}`;
        
        // Remove o quinto d√≠gito se o n√∫mero tiver 13 d√≠gitos
        if (phone.length === 13) {
          phone = phone.slice(0, 4) + phone.slice(5);
        }

        acc[contact.id].telefones.push(phone);
      }
      return acc;
    }, {});

    return Object.values(contactMap); // Transforma o dicion√°rio em uma lista de contatos
  } finally {
    connection.release();
  }
}





function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


// Fun√ß√£o para aguardar por um intervalo aleat√≥rio de tempo e exibir no log
function randomDelay() {
    const delays = [15000, 30000, 50000, 80000, 60000, 90000, 180000, 150000, 130000, 20000, 220000, 250000, 300000, 45000, 100000, 105000, 5000];
    const randomIndex = Math.floor(Math.random() * delays.length);
    const delay = delays[randomIndex];
    console.log(`Aguardando ${delay / 1000} segundos para enviar a pr√≥xima mensagem...`);
    return delay;
}


const sentConfirmations = new Set(); // Conjunto para rastrear mensagens de confirma√ß√£o enviadas


// Uso na fun√ß√£o principal para aguardar e logar o tempo restante
async function sendPersonalMessage(sock, contact) {
    if (!isWorkingHours()) {
        console.log('Fora do hor√°rio de envio ou dia n√£o √∫til. Pulando...');
        return;
    }

    for (const telefone of contact.telefones) {
        // Verifica se o n√∫mero j√° foi processado
        if (sentConfirmations.has(telefone)) {
            console.log(`Mensagem j√° enviada para o n√∫mero: ${telefone}. Pulando...`);
            continue;
        }

        console.log(`Processando contato: ${contact.DevedorNome}, telefone: ${telefone}`);

        // Busca as parcelas em atraso
        const overdueInstallments = await fetchOverdueInstallments(contact.id);

        // Formata o texto das parcelas em atraso
        const installmentsText = overdueInstallments.length > 0
            ? `‚ö†Ô∏è *Parcelas em atraso:*\n${overdueInstallments.map(installment => {
                return `   - üí∞ *Valor:* R$ ${installment.valor.toFixed(2)} | üìÖ *Vencimento:* ${formatDate(installment.dataVencimento)}`;
            }).join('\n')}`
            : '‚ö†Ô∏è *Parcelas em atraso:*\n   - Nenhuma parcela encontrada.';

        // Envia mensagem de confirma√ß√£o
        const confirmationMessage = `
            Ol√°, tudo bem?
            Somos do escrit√≥rio Adv Assessoria. Neste contato, eu falo com Sr(a) ${contact.DevedorNome}?

            Por favor, responda com:
            1Ô∏è‚É£ Sim  
            2Ô∏è‚É£ N√£o
        `;
        await sock.sendMessage(telefone + '@s.whatsapp.net', { text: confirmationMessage });
        console.log(`Mensagem de confirma√ß√£o enviada para ${telefone}`);

        // Adiciona o n√∫mero ao conjunto de rastreamento
        sentConfirmations.add(telefone);

        // Aguarda a resposta do usu√°rio
        const response = await waitForResponse(sock, telefone);

        if (response === '1') {
            // Envia mensagem personalizada ap√≥s confirma√ß√£o
            const personalizedMessage = `
                üåü *Ol√° ${contact.DevedorNome || 'Sr(a)'},* üåü

                üôã‚Äç‚ôÄÔ∏è *Me chamo Cristina* e tenho uma mensagem importante para voc√™.

                ‚ö†Ô∏è *Lamentamos que n√£o tenha pago a(s) seguinte(s) parcela(s) referente ao acordo firmado junto √† empresa:*  
                üìå *${contact.EmpresaNomeFantasia || 'N/A'}*

                ${installmentsText}

                üîë *Solicite a CHAVE PIX ou boleto para regulariza√ß√£o:*  

                ‚ùó *Solicitamos sua imediata aten√ß√£o!*  
                Hoje seu acordo est√° sendo encaminhado para:
                - ‚ùå *Negativa√ß√£o junto aos √≥rg√£os de prote√ß√£o ao cr√©dito (SPC/SERASA/BOA VISTA)*  
                - ‚öñÔ∏è *Sujeito a an√°lise e acionamento jur√≠dico junto √† comarca de sua cidade.*

                üì≤ *Negocie aqui pelo WhatsApp ou na loja:*  
                üè¢ *${contact.EmpresaNomeFantasia || 'N/A'}*

                üñãÔ∏è *Caso j√° tenha realizado o pagamento, por gentileza desconsiderar a mensagem*
                --- 
                ‚ö†Ô∏è *Estamos √† disposi√ß√£o para ajudar!*  
                üìû *Entre em contato conosco.*

                üîπ *Atenciosamente,*  
                üñãÔ∏è *Escrit√≥rio Jur√≠dico*  
                ‚öñÔ∏è *Adv Assessoria & Associados*
            `;
            await sock.sendMessage(telefone + '@s.whatsapp.net', { text: personalizedMessage });
            console.log(`Mensagem personalizada enviada para ${telefone}`);
            await updateContactAsMessaged(contact.id); // Atualiza o banco de dados
        } else if (response === '2') {
            const apologyMessage = `
                Obrigado por nos informar. Vamos registrar sua solicita√ß√£o e remover seu n√∫mero de nosso banco de dados.
            `;
            await sock.sendMessage(telefone + '@s.whatsapp.net', { text: apologyMessage });
            console.log(`Mensagem de remo√ß√£o enviada para ${telefone}`);
        } else {
            console.log(`Nenhuma resposta v√°lida recebida de ${telefone}.`);
        }

        // Aguarda um intervalo aleat√≥rio antes de continuar
        const delay = randomDelay();
        console.log(`Aguardando ${delay / 1000} segundos antes de prosseguir...`);
        await new Promise(resolve => setTimeout(resolve, delay));
    }
}



async function sendMessagesRoundRobin() {
    const activeSessions = getActiveSessions();

    if (activeSessions.length === 0) {
        console.log('Nenhuma sess√£o ativa para envio.');
        return;
    }

    const contacts = await fetchContactsToSend();

    for (const contact of contacts) {
        if (!isWorkingHours()) {
            console.log('Fora do hor√°rio de envio ou dia n√£o √∫til. Pulando...');
            break; // Interrompe o envio se n√£o estiver no hor√°rio ou for dia n√£o √∫til
        }

        const sessionId = activeSessions[sessionIndex];
        const sock = sessions[sessionId].sock;

        await sendPersonalMessage(sock, contact); // Processa o contato atual

        // Avan√ßa para a pr√≥xima sess√£o no rod√≠zio
        sessionIndex = (sessionIndex + 1) % activeSessions.length;
    }
}

// Fun√ß√£o para aguardar a resposta do usu√°rio
async function waitForResponse(sock, telefone) {
    return new Promise((resolve) => {
        const messageHandler = (upsert) => {
            const messages = upsert.messages;
            for (const msg of messages) {
                const remoteJid = msg.key.remoteJid;
                const conversation = msg.message?.conversation;

                if (remoteJid === telefone + '@s.whatsapp.net' && conversation) {
                    const text = conversation.trim();
                    console.log(`Resposta recebida do n√∫mero ${telefone}: ${text}`);

                    if (text === '1' || text === '2') {
                        sock.ev.off('messages.upsert', messageHandler);
                        resolve(text);
                    }
                }
            }
        };

        sock.ev.on('messages.upsert', messageHandler);
    });
}





// Fun√ß√£o para remover contato do banco de dados
async function removeContact(contactId) {
  const connection = await pool.getConnection();
  try {
    await connection.execute(
      `DELETE FROM devedores WHERE id = ?`,
      [contactId]
    );
  } finally {
    connection.release();
  }
}

function formatDate(date) {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0'); // Dia com dois d√≠gitos
    const month = String(d.getMonth() + 1).padStart(2, '0'); // M√™s com dois d√≠gitos
    const year = d.getFullYear(); // Ano com quatro d√≠gitos
    return `${day}/${month}/${year}`; // Formato DD/MM/YYYY
}

async function fetchOverdueInstallments(devedorId) {
    const connection = await pool.getConnection();
    try {
        const [installments] = await connection.execute(`
            SELECT valor, dataVencimento 
            FROM titulo 
            WHERE devedor_id = ? 
            AND dataVencimento < CURDATE() 
            AND statusBaixa = 3 AND idTituloRef IS NOT NULL
        `, [devedorId]);

        return installments; // Sempre retorna uma lista, mesmo que vazia
    } finally {
        connection.release();
    }
}




async function updateContactAsMessaged(contactId) {
  const connection = await pool.getConnection();
  try {
    const now = new Date();
    const formattedDate = now.toISOString().split('T')[0]; // Garante o formato YYYY-MM-DD

    const [result] = await connection.execute(
      "UPDATE titulo SET data_envio_whatsapp = ? WHERE devedor_id = ?",
      [formattedDate, contactId]
    );

    if (result.affectedRows === 0) {
      console.log(`Nenhuma linha atualizada para o devedor ID: ${contactId}. Verifique se o ID existe.`);
    } else {
      console.log(`Data de envio atualizada para o devedor ID: ${contactId}.`);
    }
  } catch (error) {
    console.error(`Erro ao atualizar data_envio_whatsapp para o devedor ID: ${contactId}:`, error);
  } finally {
    connection.release();
  }
}



async function deleteSession(sessionId) {
  try {
    const sessionPath = `./auth_info_${sessionId}`;
    if (sessions[sessionId]) {
      const sock = sessions[sessionId].sock;

      // Fecha a conex√£o com o WhatsApp
      if (sock) {
        await sock.logout();
        console.log(`Conex√£o da sess√£o ${sessionId} encerrada.`);
      }

      // Remove do objeto de sess√µes
      delete sessions[sessionId];
      console.log(`Sess√£o ${sessionId} removida da mem√≥ria.`);
    }

    // Remove a pasta de autentica√ß√£o
    if (fs.existsSync(sessionPath)) {
      fs.rmSync(sessionPath, { recursive: true, force: true });
      console.log(`Pasta da sess√£o ${sessionId} apagada.`);
    }
  } catch (error) {
    console.error(`Erro ao remover a sess√£o ${sessionId}:`, error);
    throw error;
  }
}

// Adiciona endpoint para deletar sess√£o
app.delete('/end-session/:sessionId', async (req, res) => {
  const { sessionId } = req.params;

  if (!sessions[sessionId] && !fs.existsSync(`./auth_info_${sessionId}`)) {
    return res.status(404).json({ error: 'Sess√£o n√£o encontrada.' });
  }

  try {
    await deleteSession(sessionId);
    res.json({ message: `Sess√£o ${sessionId} removida com sucesso.` });
  } catch (error) {
    res.status(500).json({ error: `Erro ao remover a sess√£o ${sessionId}: ${error.message}` });
  }
});


async function sendMessagesRoundRobin() {
  const activeSessions = getActiveSessions();

  if (activeSessions.length === 0) {
    console.log('Nenhuma sess√£o ativa para envio.');
    return;
  }

  const contacts = await fetchContactsToSend();

  for (const contact of contacts) {
    if (!isWorkingHours()) {
      console.log('Fora do hor√°rio de envio ou dia n√£o √∫til. Pulando...');
      break; // Interrompe o envio se n√£o estiver no hor√°rio ou for dia n√£o √∫til
    }

    // Alterna entre as sess√µes ativas
    const sessionId = activeSessions[sessionIndex];
    const sock = sessions[sessionId].sock;

    await sendPersonalMessage(sock, contact); // Envia a mensagem utilizando a fun√ß√£o adaptada

    // Avan√ßa para a pr√≥xima sess√£o no rod√≠zio
    sessionIndex = (sessionIndex + 1) % activeSessions.length;
  }
}


const CHECK_INTERVAL = 10 * 60 * 1000; // Intervalo de 10 minutos em milissegundos

async function periodicMessageCheck() {
  while (true) {
    if (isWorkingHours()) {
      console.log('Dentro do hor√°rio de envio. Verificando novas mensagens...');
      try {
        await sendMessagesRoundRobin(); // Usa o rod√≠zio de sess√µes
      } catch (error) {
        console.error('Erro durante o envio peri√≥dico de mensagens:', error);
      }
    } else {
      console.log('Fora do hor√°rio de envio. Aguardando...');
    }

    await delay(CHECK_INTERVAL);
  }
}




async function connectToWhatsApp(sessionId) {
  const sessionPath = `./auth_info_${sessionId}`;
  const { state, saveCreds } = await useMultiFileAuthState(sessionPath);

  const sock = makeWASocket({
    auth: state,
    printQRInTerminal: false,
    keepAliveIntervalMs: 60000,
  });

  sock.ev.on('connection.update', async (update) => {
    const { connection, lastDisconnect, qr } = update;

    if (qr) {
      sessions[sessionId].qrCode = qr;
      console.log(`QR Code armazenado para a sess√£o ${sessionId}`);
    }

    if (connection === 'open') {
      console.log(`Sess√£o ${sessionId} conectada!`);
      sessions[sessionId].isConnected = true;

      
	  
	  
	  
	  
      // Inicia a verifica√ß√£o peri√≥dica de mensagens
      periodicMessageCheck(sock);
    } else if (connection === 'close') {
      console.log(`Conex√£o encerrada. Tentando reconectar...`);
      if (lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut) {
        console.log('Reconectando devido a erro tempor√°rio...');
        await connectToWhatsApp(sessionId);
      } else {
        console.log('Conex√£o encerrada permanentemente. √â necess√°rio escanear o QR Code novamente.');
      }
    }
  });

  sock.ev.on('creds.update', saveCreds);




  sessions[sessionId] = { sock, isConnected: false, qrCode: null };
  console.log(`Sess√£o ${sessionId} adicionada a 'sessions'`);
  return sock;
}

async function restoreSessions() {
  const sessionDirs = fs.readdirSync('.').filter(dir => dir.startsWith('auth_info_'));

  for (const dir of sessionDirs) {
    const sessionId = dir.split('auth_info_')[1];
    console.log(`Restaurando sess√£o: ${sessionId}`);
    await connectToWhatsApp(sessionId);
  }
}

app.post('/start-session/:sessionId', async (req, res) => {
  const { sessionId } = req.params;
  if (sessions[sessionId]) {
    return res.status(400).json({ error: 'Sess√£o j√° iniciada' });
  }
  await connectToWhatsApp(sessionId);
  res.json({ message: `Sess√£o ${sessionId} iniciada` });
});

app.get('/sessions', (req, res) => {
  const sessionList = Object.keys(sessions).map(sessionId => ({
    sessionId,
    isConnected: sessions[sessionId].isConnected,
  }));
  res.json(sessionList);
});

app.get('/qrcode/:sessionId', (req, res) => {
  const { sessionId } = req.params;
  const session = sessions[sessionId];

  if (!session) {
    return res.status(404).send('Sess√£o n√£o encontrada.');
  }

  if (session.qrCode) {
    res.setHeader('Content-Type', 'image/png');
    qrcode.toFileStream(res, session.qrCode);
  } else if (session.isConnected) {
    res.send('Sess√£o j√° est√° conectada.');
  } else {
    res.send('QR code n√£o dispon√≠vel no momento, tente novamente mais tarde.');
  }
});

app.listen(port, async () => {
  console.log(`Servidor rodando na porta ${port}`);
  await restoreSessions(); // Restaura sess√µes ao iniciar
});
