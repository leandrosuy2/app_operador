const { default: makeWASocket, useMultiFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');
const express = require('express');
const mysql = require('mysql2/promise');
const qrcode = require('qrcode');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

const app = express();
app.use(express.json());
const port = 8011;

const sessions = {};

const dbConfig = {
  host: '127.0.0.1',
  user: 'root',
  password: '@Intercheck!#jksddfofsmd√ßls$',
  database: 'app_sistnortecheck',
  waitForConnections: true,
  connectionLimit: 100,
  queueLimit: 0,
};

let sessionIndex = 0
const holidays = [
  '2024-01-01', // Ano Novo
  '2024-02-12', // Carnaval
  '2024-02-13', // Quarta-feira de Cinzas (ponto facultativo at√© as 14h)
  '2024-03-29', // Sexta-feira Santa
  '2024-04-21', // Tiradentes
  '2024-05-01', // Dia do Trabalho
  '2024-05-30', // Corpus Christi
  '2024-09-07', // Independ√™ncia do Brasil
  '2024-10-12', // Nossa Senhora Aparecida
  '2024-11-02', // Finados
  '2024-11-15', // Proclama√ß√£o da Rep√∫blica
  '2024-12-25'  // Natal
];

function isHoliday(date) {
  const formattedDate = date.toISOString().split('T')[0];
  return holidays.includes(formattedDate);
}

function isWorkingHours() {
  const now = new Date();
  const dayOfWeek = now.getDay(); // 0 = domingo, 6 = s√°bado
  const hour = now.getHours();
  const minute = now.getMinutes();

  if (dayOfWeek === 0 || dayOfWeek === 6 || isHoliday(now)) {
    return false; // Feriado ou fim de semana
  }

  const currentTimeInMinutes = hour * 60 + minute;
  const startTimeInMinutes = 9 * 60; // 14:00
  const endTimeInMinutes = 17 * 60 + 59; // 17:59

  return currentTimeInMinutes >= startTimeInMinutes && currentTimeInMinutes <= endTimeInMinutes;
}


function getActiveSessions() {
  return Object.keys(sessions).filter(sessionId => sessions[sessionId].isConnected);
}


const pool = mysql.createPool(dbConfig);

app.use(express.static(path.join(__dirname, 'public')));

async function fetchContactsToSend() {
  const connection = await pool.getConnection();
  try {
    const [contacts] = await connection.execute(`
      SELECT DISTINCT
        devedores.id,
        t.telefone,
        devedores.nome,
        titulo.statusBaixa,
        titulo.data_baixa,
        core_empresa.nome_fantasia
      FROM (
        SELECT id, telefone FROM devedores UNION ALL
        SELECT id, telefone1 FROM devedores UNION ALL
        SELECT id, telefone2 FROM devedores UNION ALL
        SELECT id, telefone3 FROM devedores UNION ALL
        SELECT id, telefone4 FROM devedores UNION ALL
        SELECT id, telefone5 FROM devedores UNION ALL
        SELECT id, telefone6 FROM devedores UNION ALL
        SELECT id, telefone7 FROM devedores UNION ALL
        SELECT id, telefone8 FROM devedores UNION ALL
        SELECT id, telefone9 FROM devedores UNION ALL
        SELECT id, telefone10 FROM devedores
      ) t
      JOIN devedores ON t.id = devedores.id
      JOIN core_empresa ON devedores.empresa_id = core_empresa.id
      JOIN titulo ON titulo.devedor_id = devedores.id
      WHERE
        (titulo.statusBaixa = 0 OR titulo.statusBaixa IS NULL)
        AND titulo.dataVencimento < CURDATE()
        AND (titulo.data_envio_whatsapp < CURDATE() OR titulo.data_envio_whatsapp IS NULL)
        AND t.telefone IS NOT NULL
        AND t.telefone <> ''  
      ORDER BY titulo.data_baixa ASC
    `);

    const contactMap = contacts.reduce((acc, contact) => {
      const formattedPhone = contact.telefone.replace(/\D/g, ''); // Remove caracteres n√£o num√©ricos

      if (formattedPhone.length > 0) {
        if (!acc[contact.id]) {
          acc[contact.id] = {
            ...contact,
            telefones: [],
          };
        }

        let phone = formattedPhone.startsWith('55') ? formattedPhone : `55${formattedPhone}`;
        
        // Verifica se o telefone tem 13 d√≠gitos ap√≥s adicionar o '55' e remove o quinto d√≠gito, se necess√°rio
        if (phone.length === 13) {
          phone = phone.slice(0, 4) + phone.slice(5);
        }

        acc[contact.id].telefones.push(phone);
      }
      return acc;
    }, {});

    return Object.values(contactMap); // Transforma o dicion√°rio em uma lista de contatos
  } finally {
    connection.release();
  }
}





function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function sendPersonalMessage(sock, contact) {
  if (!isWorkingHours()) {
    console.log('Fora do hor√°rio de envio ou dia n√£o √∫til. Pulando...');
    return;
  }

  for (const telefone of contact.telefones) {
    try {
      const now = new Date();
      const formattedDate = now.toISOString().split('T')[0];

      // Verifica se a mensagem j√° foi enviada hoje
      const connection = await pool.getConnection();
      try {
        const [rows] = await connection.execute(
          `SELECT 1 FROM titulo 
           WHERE devedor_id = ? AND data_envio_whatsapp = ?`,
          [contact.id, formattedDate]
        );

        if (rows.length > 0) {
          console.log(`Mensagem j√° enviada hoje para o contato ID: ${contact.id}, telefone: ${telefone}. Pulando...`);
          continue; // Mensagem j√° enviada para este n√∫mero
        }
      } finally {
        connection.release();
      }

      const initialMessage = `
        Ol√°, tudo bem?
        Somos do escrit√≥rio Adv Assessoria. Neste contato, eu falo com Sr(a) ${contact.nome}?

        Por favor, responda com:
        1Ô∏è‚É£ Sim  
        2Ô∏è‚É£ N√£o
      `;

      await sock.sendMessage(telefone + '@s.whatsapp.net', { text: initialMessage });
      console.log(`Mensagem de confirma√ß√£o enviada para ${telefone}`);

      // Atualiza o banco de dados imediatamente ap√≥s enviar a mensagem inicial
      await updateContactAsMessaged(contact.id, formattedDate);

      // Aguarda a resposta sem limite de tempo
      const response = await waitForResponse(sock, telefone);

      if (response === '1') {
        const messageText = `
          üìå ID do Cliente: ${contact.id}

          Ol√°, ${contact.nome}!  
          Somos da Adv Assessoria & Associados e estamos entrando em contato referente a uma pend√™ncia registrada em nome da empresa ${contact.nome_fantasia}.

          Estamos oferecendo condi√ß√µes especiais para quita√ß√£o, incluindo:  
          ‚û°Ô∏è Parcelamento facilitado  
          ‚û°Ô∏è Descontos em juros  
          ‚û°Ô∏è Descontos incr√≠veis para pagamento √† vista  

          üéØ N√£o perca essa oportunidade de resolver sua pend√™ncia de forma simples e r√°pida.  

          üìû **Fale conosco pelo WhatsApp** para mais informa√ß√µes e suporte.  
          üè¢ Ou visite a loja **${contact.nome_fantasia}** para negociar diretamente.  

          üìñ Escrit√≥rio Jur√≠dico  
          Adv Assessoria & Associados
        `;
        await sock.sendMessage(telefone + '@s.whatsapp.net', { text: messageText });
        console.log(`Mensagem de cobran√ßa enviada para ${telefone}`);
      } else if (response === '2') {
        const apologyMessage = `
          Obrigado por nos informar. Vamos registrar sua solicita√ß√£o e remover seu n√∫mero de nosso banco de dados. 
          Caso precise de algo, estamos √† disposi√ß√£o.

          üìñ Escrit√≥rio Jur√≠dico  
          Adv Assessoria & Associados
        `;
        await sock.sendMessage(telefone + '@s.whatsapp.net', { text: apologyMessage });
        console.log(`Mensagem de remo√ß√£o enviada para ${telefone}`);
      } else {
        console.log(`Nenhuma resposta v√°lida recebida de ${telefone}.`);
      }
    } catch (error) {
      console.error(`Erro ao enviar mensagem para ${telefone}:`, error);
    }
  }
}



// Fun√ß√£o para aguardar a resposta do usu√°rio
async function waitForResponse(sock, telefone) {
  return new Promise((resolve) => {
    const messageHandler = (upsert) => {
      const messages = upsert.messages; // Captura as mensagens recebidas
      for (const msg of messages) {
        const remoteJid = msg.key.remoteJid;
        const conversation = msg.message?.conversation;

        // Verifica se a mensagem √© do contato esperado e cont√©m texto
        if (remoteJid === telefone + '@s.whatsapp.net' && conversation) {
          const text = conversation.trim(); // Texto da mensagem
          console.log(`Resposta recebida do n√∫mero ${telefone}: ${text}`);

          if (text === '1' || text === '2') {
            sock.ev.off('messages.upsert', messageHandler); // Remove o listener ap√≥s resposta v√°lida
            resolve(text); // Resolve a promessa com a resposta do usu√°rio
          } else {
            console.log(`Resposta inv√°lida recebida: ${text}`);
          }
        }
      }
    };

    // Registra o evento de novas mensagens
    sock.ev.on('messages.upsert', messageHandler);

    // Define um timeout opcional, se necess√°rio
    setTimeout(() => {
      sock.ev.off('messages.upsert', messageHandler); // Remove o listener ap√≥s timeout
      console.log('Tempo limite para resposta expirado.');
      resolve(null); // Resolve a promessa com null ao expirar
    }, 300000); // Timeout de 5 minutos
  });
}



// Fun√ß√£o para remover contato do banco de dados
async function removeContact(contactId) {
  const connection = await pool.getConnection();
  try {
    await connection.execute(
      `DELETE FROM devedores WHERE id = ?`,
      [contactId]
    );
  } finally {
    connection.release();
  }
}



async function updateContactAsMessaged(contactId) {
  const connection = await pool.getConnection();
  try {
    const now = new Date();
    const formattedDate = now.toISOString().split('T')[0]; // Garante o formato YYYY-MM-DD

    const [result] = await connection.execute(
      "UPDATE titulo SET data_envio_whatsapp = ? WHERE devedor_id = ?",
      [formattedDate, contactId]
    );

    if (result.affectedRows === 0) {
      console.log(`Nenhuma linha atualizada para o devedor ID: ${contactId}. Verifique se o ID existe.`);
    } else {
      console.log(`Data de envio atualizada para o devedor ID: ${contactId}.`);
    }
  } catch (error) {
    console.error(`Erro ao atualizar data_envio_whatsapp para o devedor ID: ${contactId}:`, error);
  } finally {
    connection.release();
  }
}



async function deleteSession(sessionId) {
  try {
    const sessionPath = `./auth_info_${sessionId}`;
    if (sessions[sessionId]) {
      const sock = sessions[sessionId].sock;

      // Fecha a conex√£o com o WhatsApp
      if (sock) {
        await sock.logout();
        console.log(`Conex√£o da sess√£o ${sessionId} encerrada.`);
      }

      // Remove do objeto de sess√µes
      delete sessions[sessionId];
      console.log(`Sess√£o ${sessionId} removida da mem√≥ria.`);
    }

    // Remove a pasta de autentica√ß√£o
    if (fs.existsSync(sessionPath)) {
      fs.rmSync(sessionPath, { recursive: true, force: true });
      console.log(`Pasta da sess√£o ${sessionId} apagada.`);
    }
  } catch (error) {
    console.error(`Erro ao remover a sess√£o ${sessionId}:`, error);
    throw error;
  }
}

// Adiciona endpoint para deletar sess√£o
app.delete('/end-session/:sessionId', async (req, res) => {
  const { sessionId } = req.params;

  if (!sessions[sessionId] && !fs.existsSync(`./auth_info_${sessionId}`)) {
    return res.status(404).json({ error: 'Sess√£o n√£o encontrada.' });
  }

  try {
    await deleteSession(sessionId);
    res.json({ message: `Sess√£o ${sessionId} removida com sucesso.` });
  } catch (error) {
    res.status(500).json({ error: `Erro ao remover a sess√£o ${sessionId}: ${error.message}` });
  }
});


async function sendMessagesRoundRobin() {
  const activeSessions = getActiveSessions();

  if (activeSessions.length === 0) {
    console.log('Nenhuma sess√£o ativa para envio.');
    return;
  }

  const contacts = await fetchContactsToSend();

  for (const contact of contacts) {
    if (!isWorkingHours()) {
      console.log('Fora do hor√°rio de envio ou dia n√£o √∫til. Pulando...');
      break; // Interrompe o envio se n√£o estiver no hor√°rio ou for dia n√£o √∫til
    }

    // Alterna entre as sess√µes ativas
    const sessionId = activeSessions[sessionIndex];
    const sock = sessions[sessionId].sock;

    await sendPersonalMessage(sock, contact); // Envia a mensagem utilizando a fun√ß√£o adaptada

    // Avan√ßa para a pr√≥xima sess√£o no rod√≠zio
    sessionIndex = (sessionIndex + 1) % activeSessions.length;
  }
}


const CHECK_INTERVAL = 10 * 60 * 1000; // Intervalo de 10 minutos em milissegundos

async function periodicMessageCheck() {
  while (true) {
    if (isWorkingHours()) {
      console.log('Dentro do hor√°rio de envio. Verificando novas mensagens...');
      try {
        await sendMessagesRoundRobin(); // Usa o rod√≠zio de sess√µes
      } catch (error) {
        console.error('Erro durante o envio peri√≥dico de mensagens:', error);
      }
    } else {
      console.log('Fora do hor√°rio de envio. Aguardando...');
    }

    await delay(CHECK_INTERVAL);
  }
}




async function connectToWhatsApp(sessionId) {
  const sessionPath = `./auth_info_${sessionId}`;
  const { state, saveCreds } = await useMultiFileAuthState(sessionPath);

  const sock = makeWASocket({
    auth: state,
    printQRInTerminal: false,
    keepAliveIntervalMs: 60000,
  });

  sock.ev.on('connection.update', async (update) => {
    const { connection, lastDisconnect, qr } = update;

    if (qr) {
      sessions[sessionId].qrCode = qr;
      console.log(`QR Code armazenado para a sess√£o ${sessionId}`);
    }

    if (connection === 'open') {
      console.log(`Sess√£o ${sessionId} conectada!`);
      sessions[sessionId].isConnected = true;

      
	  
	  
	  
	  
      // Inicia a verifica√ß√£o peri√≥dica de mensagens
      periodicMessageCheck(sock);
    } else if (connection === 'close') {
      console.log(`Conex√£o encerrada. Tentando reconectar...`);
      if (lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut) {
        console.log('Reconectando devido a erro tempor√°rio...');
        await connectToWhatsApp(sessionId);
      } else {
        console.log('Conex√£o encerrada permanentemente. √â necess√°rio escanear o QR Code novamente.');
      }
    }
  });

  sock.ev.on('creds.update', saveCreds);




  sessions[sessionId] = { sock, isConnected: false, qrCode: null };
  console.log(`Sess√£o ${sessionId} adicionada a 'sessions'`);
  return sock;
}

async function restoreSessions() {
  const sessionDirs = fs.readdirSync('.').filter(dir => dir.startsWith('auth_info_'));

  for (const dir of sessionDirs) {
    const sessionId = dir.split('auth_info_')[1];
    console.log(`Restaurando sess√£o: ${sessionId}`);
    await connectToWhatsApp(sessionId);
  }
}

app.post('/start-session/:sessionId', async (req, res) => {
  const { sessionId } = req.params;
  if (sessions[sessionId]) {
    return res.status(400).json({ error: 'Sess√£o j√° iniciada' });
  }
  await connectToWhatsApp(sessionId);
  res.json({ message: `Sess√£o ${sessionId} iniciada` });
});

app.get('/sessions', (req, res) => {
  const sessionList = Object.keys(sessions).map(sessionId => ({
    sessionId,
    isConnected: sessions[sessionId].isConnected,
  }));
  res.json(sessionList);
});

app.get('/qrcode/:sessionId', (req, res) => {
  const { sessionId } = req.params;
  const session = sessions[sessionId];

  if (!session) {
    return res.status(404).send('Sess√£o n√£o encontrada.');
  }

  if (session.qrCode) {
    res.setHeader('Content-Type', 'image/png');
    qrcode.toFileStream(res, session.qrCode);
  } else if (session.isConnected) {
    res.send('Sess√£o j√° est√° conectada.');
  } else {
    res.send('QR code n√£o dispon√≠vel no momento, tente novamente mais tarde.');
  }
});

app.listen(port, async () => {
  console.log(`Servidor rodando na porta ${port}`);
  await restoreSessions(); // Restaura sess√µes ao iniciar
});
